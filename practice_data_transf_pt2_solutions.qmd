---
title: Data Transformation Part 2 Practice
subtitle: Solutions
author: "Intro to Data Science"
date: today
format: 
    html: 
      toc: true
      toc-depth: 2
      fig-height: 4
      fig-width: 9
      self-contained: true  # Embed all external dependencies
execute: 
  eval: true
code-tools: true  # Enable code tools, including the copy button
---



```{r}
#| label: setup
#| include: false
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(nycflights13)
hfi_data <- read_csv("http://people.kzoo.edu/enordmoe/math265/data/hfi_cc_2022.csv")
```

# Working with Columns

## Human Freedom Index Data examples

Use `View(hfi_data)` to browse the data and refer to [this Kaggle link](https://www.kaggle.com/gsutters/the-human-freedom-index) for background information.

1)  Select variables by name:

```{r}
# select certain variables by name
hfi_data |> 
  select(year, countries, region, pf_score, ef_score, hf_score)
hfi_data |> 
  select(year:region)

# By column number : NOT recommended in general b/c of reproducibility problems
hfi_data |> 
  select(1:4)

# select all columns except those between year and day
hfi_data |> 
  select(-(year:region))
```

2)  Use `relocate()` to reorder

```{r}
# use relocate to put variables of most interest in first columns
hfi_data |> 
  relocate(year, countries, region, pf_score, ef_score,
           hf_score)

# rename() keeps all variables not explicitly mentioned 
hfi_data |> 
  rename(country = countries)
```

3)  Use the `select()` helper functions to pick variables or groups of variables with similar names or distinguishing strings:

<!-- -->

a)  Select key variables and all personal freedom variables:

```{r}
hfi_data |> 
  select(year, countries, region, starts_with("pf"))
```

b)  Select all rank variables

```{r}
hfi_data |> 
  select(year, countries, region, ends_with("rank"))
```

c)  Select all regulation variables

```{r}
hfi_data |> 
  select(year, countries, region, contains("regulation"))
```

d)  Select all gender or sex-related variables

```{r}
# Select all gender- or sex-related variables
hfi_data |> 
  select(year, countries, region, contains("sex"),
         contains("gender"))
```

4)  For more practice, try to select all the variables that meet each of the following criteria:

-   Contain references to \`"tax"\

```{r}
hfi_data |> 
  select(year, countries, region, contains("tax"))
```

-   Deal with "labor" freedoms\

```{r}
hfi_data |> 
  select(year, countries, region, contains("labor"))
```

-   Contain references to "identity"\

```{r}
hfi_data |> 
  select(year, countries, region, contains("identity"))
```

-   Deal with security and safety issues

```{r}
hfi_data |> 
  select(year, countries, region, contains("_ss_"))
```

-   Are in the first 4 or last 2 columns. (Hint: There are many approaches. One is to use the `last_col()` selection helper.)

```{r}
hfi_data |> 
  select(1:4, last_col(1), last_col())
# OR
hfi_data |> 
  select(1:4, 140:141)
```

## More **flights** data examples

Because most of the variables in the `hfi_data` dataset are recorded on a 10-point scale, they don't lend themselves to much in the way of transformation. Instead, we return to the `flights` data to illustrate various ways of creating new variables.

We first create a smaller data set of make it easier to see what's going on:

```{r}
flights_sml <- flights |> 
  select(year:day, ends_with("delay"), distance, air_time, dep_time)
```

Use `flights_sml` for the following `mutate()` examples:

1)  Create two new variables:

```{r}
flights_sml |> 
  mutate(
    gain = dep_delay - arr_delay,
    speed = distance / air_time * 60
)
```

-   Why not use `arr_delay - dep_delay`?

**Answer:** We prefer the gain to be positive when we have "made up" time, where the arrival delay is less than the departure delay.

-   Why multiply by 60 in the speed calculation?

**Answer:** Because `air_time` records time in the air in minutes and we want to express speed in miles per hour (assuming we're American:).

2)  What is the following chunk doing? What kind of variable is `late`?

```{r}
flights |> 
  mutate(late = arr_delay>0) |> 
  select(year, month, day, carrier, dest, late, arr_delay)
```

**Answer:** This chunk is creating a logical variable called late and creating a dataset with only the variables listed on the `select()` line: `year, month, day, carrier, dest, late, arr_delay`.

3)  What's the difference between these two commands?

```{r}
flights |> 
  mutate(air_time_hrs = air_time/60)
flights |> 
  mutate( air_time_hrs = air_time/60, .keep = "none")
```

**Answer:** The first creates the variable `air_time_hrs` and adds it to the dataset while the second creates the same variable but produces a data frame with the new variable as the only variable in the dataset. 

When might you prefer the second over the first?

**Answer:** 

When you are only focused on describing air time and don't need the other variables, not very often. 


4)  What is this doing? Can you figure out what the `%/%` and `%%` operators do?

```{r}
flights_sml |> 
  mutate(hour = dep_time %/% 100, 
         minute = dep_time %% 100,
         .keep = "used"
)
```

**Answer:** This is creating two new variables, the hour of departure and the minutes of departure, splitting the departure time into minutes and hours. The operator `%/%` is the integer division operator and this yields the hour as the number before the decimal. The operator `%%` is the modulo operator that returns the remainder after division by the second number (100 in this case). Because of the way time is represented as an integer, this operation just gives the number of minutes after the hour for th given departure time.
