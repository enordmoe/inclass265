---
title: "Chapter 13: Numbers"
subtitle: "Introduction to Data Science"
author: "MATH 265"
format: 
  html:
      theme: materia
editor: visual
toc: true
execute: 
  warning: false
  eval: false #comment this line to see all output
---

```{r}
#| label: setup
#| include: false
#| eval: true
library(tidyverse)
library(ggthemes)
library(palmerpenguins)
chiflights2020 <- read_csv("https://people.kzoo.edu/enordmoe/math265/data/chiflight2020.csv")
```

# Outline

-   Going from strings to numbers
-   Fun with `count()`
-   Numeric transformations and `mutate()`
-   More ways to `mutate()`
-   Numeric summaries

# Going from strings to numbers

## Making Numbers

-   Usually numbers are integer or double types

-   After importing or pivoting, they may be classified as character strings

-   Use number parsing functions to convert

    -   `parse_double()` to simply convert numbers written as strings

    -   `parse_number()` to extract numeric content from character strings

## Parsing Examples {.smaller}

Use \`parse_double() for numbers written as strings:

```{r}
vector1 <- c("1.23e-3", "4.56e2", "7.89e4", "1.23e-5", "6.78e8")
vector1
parse_double(vector1)
```

Use `parse_number()` for strings with non-numeric text:

```{r}
vector2 <- c("$10.50", "€20.75", "¥30.00", "£40.25", "$50.99")
vector2
parse_number(vector2)
```

But what about this?

```{r}
vector3 <- c("a1", "27.3%", "$42.12", "part4", "abc")
vector3
parse_number(vector3)
```

# Fun with `count()`

## What are the most popular destinations out of Chicago?

Let's use the `chiflights2020` data to see the most popular flights out of Chicago:

-   In alpha order using `count()`:

```{r}
chiflights2020 |>  count(dest)
```

-   In frequency order using `sort` option

```{r}
chiflights2020 |>  count(dest, sort = TRUE)

```

::: callout-note
Add `print(n = Inf)` at the end of the pipe (or `View()`) to see them all (at the console). This is generally not recommended but sometimes useful for checking purposes.
:::

## Other `count()` variants

**Question**: What was the total airtime for each plane flying out of Chicago?

**Answer:** Use a weighted count as shown below.

```{r}
chiflights2020 |> 
  count(tailnum, wt = air_time, sort = TRUE) # finds the planes with the most time in the air.
```

::: callout-caution
The column labeled `n` actually contains the **total minutes** over the year 2020 rather than the number of flights.
:::

## Reminder: Other `summarize()` options

-   If you want more than just frequencies, use `group_by()` and other summary functions.

-   What is the typical and longest arrival delay from Chicago to each destination?

```{r}
chiflights2020 |> 
  group_by(dest) |> 
  summarize(
    n = n(),
    med_delay = median(arr_delay, na.rm = TRUE),
    max_delay = max(arr_delay, na.rm = TRUE) 
  ) |> 
  arrange(desc(max_delay))
```

## How many airlines go from O'Hare to each destination?

```{r}
chiflights2020 |> 
  filter(origin == "ORD") |> 
  group_by(dest) |> 
  summarize(
    n = n(),
    n_carriers = n_distinct(carrier)
  ) |> 
  arrange(desc(n_carriers)) # which are the destinations served by the most carriers?
```

::: {.callout-tip collapse="true"}
## Try it yourself

**Question**: How can you use `count()` to count the number rows with a missing value for a given variable?
:::

# Numeric transformations and `mutate()`

## Numeric transformations: recycling rules

-   Transformation functions work well with `mutate()` because output is the same length as the input.

-   **Recycling rules:** when left and right sides of arithmetic operations differ in length, R handles mismatch by *recycling* the shorter vector.

![](https://images.unsplash.com/photo-1611284446314-60a58ac0deb9?q=80&w=2940&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D){fig-align="right" width="200"}

## Recycling rules: simple examples

1.  Adding a constant to a vector:

```{r}
xvec <- c(1, 2, 3, 4, 5)
xvec + 10
```

2.  Adding two vectors of different lengths:

```{r}
xvec1 <- c(1, 2, 3) # length 3
xvec2 <- c(10, 20, 30, 40, 50) # length 5
xvec3 <- c(10, 20, 30, 40, 50, 60) # length 6
xvec1 + xvec2  # causes a warning
xvec1 + xvec3  # recycles without warning
```

3.  Multiplying (or dividing) a vector by a shorter vector:

```{r}
xvec1 <- c(1, 2, 3, 4, 5)
xvec2 <- c(10, 20)
xvec1 * xvec2
xvec1/xvec2
```

::: callout-warning
-   Avoid relying on recycling to handle operations between mismatched length vectors!
-   Use only for operations involving a vector and a constant.
:::

## Computing "Relative" Flight Time

Use recycling to get a "relative" flight time for each `origin`-`dest` pair:

```{r}
chiflights2020 |> 
  select(day, month, hour, origin, dest,air_time) |> 
  group_by(origin, dest) |> 
  mutate(
    rel_air_time = air_time/mean(air_time, na.rm = TRUE)
  ) 
```

**Interpret:** a flight with relative flight time of 1.10 took 10% longer than the average for that route.

::: callout-note
Note the use of `mutate()` rather than `summarize()` with `group_by()` so the relative calculations are done for each row **within** the `origin`-`dest` pair.
:::

## Calculating the minimum and maximum

Question: For each flight, find the maximum of the departure delay and flight delay.

```{r}
chiflights2020 |> 
  mutate(
    maxdelay = max(dep_delay, arr_delay, na.rm = TRUE)
  ) |> 
  select(year:day, dep_delay, arr_delay, maxdelay)
```

::: {.callout-warning collapse="true"}
## Warning about max and min

**Danger**: Don't confuse the `max()` and `min()` functions for `summarize()` with the parallel `pmax()` and `pmin()` functions for `mutate()`. Without warning you will get nonsensical results!
:::

## Calculating the minimum and maximum correctly

Question: For each flight, find the maximum of the departure delay and flight delay.

Once again, using the correct `pmax()` function:

```{r}
chiflights2020 |> 
  mutate(
    maxdelay = pmax(dep_delay, arr_delay, na.rm = TRUE)
  ) |> 
  select(year:day, dep_delay, arr_delay, maxdelay)
```

## Other vectorized functions to use with `mutate()`

-   Offsets
    -   `lag()`, `lead()`
-   Cumulating functions
    -   `cummax()`, `cummean()`, cumsum()\`, etc.
-   Ranking
    -   `row_number()`, `min_rank()`, `cume_dist()`, etc.

## Modular arithmetic refresher

::: callout-tip
## Try it yourself

**Question:** What does each line in the code chunk below do?
:::

```{r}
chiflights2020 |> 
  group_by(hour = sched_dep_time %/% 100) |> 
  summarize(prop_cancelled = mean(is.na(dep_time)), n = n()) |> 
  filter(hour > 1) |> 
  ggplot(aes(x = hour, y = prop_cancelled)) +
  geom_line(color = "#2B9AF3") + 
  geom_point(aes(size = n))
```

## Converting Numeric Variables to Categorical

**Problem:** Convert departure hour into a categorical variable with intervals corresponding to morning, midday, and evening

```{r}
chiflights2020 |> 
  mutate(deptime_of_day = cut(hour, breaks = c(0, 11, 15, 24))) |> 
  select(hour, deptime_of_day)
```

To know about cutting up variables:

-   Breaks do not need to be evenly space
-   Endpoint conventions can be set using keywords
-   Values outside the breaks will be set to NA.
-   Labels can be assigned using `labels =` .

::: callout-note
We already saw this kind of function with the helper functions `cut_number()`, `cut_width()`, etc in `ggplot()`.
:::

## Cumulating

**Problem:** For the route from O'hare to Detroit on American Airlines, find and plot the average delay up to the time of the flight for each flight:

```{r}
chiflights2020 |> 
  filter(origin == "ORD", dest == "DTW") |> 
  select(time_hour, dep_delay) |> 
  mutate(avg_delay_so_far = cummean(dep_delay)) |> 
  ggplot(aes(x = time_hour, y = avg_delay_so_far)) +
  geom_line(color = "#173576")

```

What went wrong?

::: {.callout-warning collapse="true"}
## Warning!

Did you forget to remove the flights with missing departure times?
:::

## Cumulating corrected

We need to explicitly remove the flights with missing departure delays:

```{r}
chiflights2020 |> 
  filter(origin == "ORD", dest == "DTW", !is.na(dep_delay)) |> 
  select(time_hour, dep_delay) |> 
  mutate(avg_delay_so_far = cummean(dep_delay)) |> 
  ggplot(aes(x = time_hour, y = avg_delay_so_far)) +
  geom_line(color = "#173576")

```

What anomalies may be be due to Covid? Why?

## Practice

::: callout-tip
## Try it yourself

1.  Use `mutate()` with appropriate functions to convert `dep_time` (e.g. 541, 903) to a variable whose value represents minutes since midnight.

2.  Round `dep_time` and `arr_time` to the nearest five minutes.
:::

# More ways to `mutate()`

## Ranks

-   Often we are interested in the "rank" of a variable's value rather than it's absolute number (e.g., 3rd highest grossing movie of the month).

-   Several different ranking functions can be used with `mutate()`

    -   `row_number()`, `min_rank()`, `dense_rank()`

## Ranks Example

Create a small dataset and sort it by the variable of interest:

```{r}
df <- tibble(
  Name = c("Jia", "Yuki", "Aarav", "Sofia", "Mohammed", "Priya", "Liam", "Chen", "Amira"),
  Score = c(85, 92, 78, 85, 94, 78, 85, 92, 78)
) |> 
  arrange(desc(Score))
df
```

Now attach rankings:

```{r}
df <- df %>%
  mutate(
    dense_rank = dense_rank(Score),
    row_number = row_number(Score),
    min_rank = min_rank(Score),
    avg_rank = rank(Score, ties.method = "average") # Base R ranking function
  )
df
```

-   `dense_rank()` assigns ranks to values in a vector, starting from 1, without any gaps between ranks

    -   tied values get the same rank, but the next rank is increased by 1.

-   `min_rank()` assigns ranks with lowest starting from 1.

    -   tied values all get the same (minimum) rank; the next rank is increased by the number tied at the previous value

-   `row_number()` assigns ranks with lowest starting from 1.

    -   no consideration of ties, just ranks in order found (unstable as a ranking mechanism)

-   `rank(, ties.method = "average")` assigns ranks with lowest starting from 1

    -   tied values all get the same (average) rank; the next rank is increased to account for the number tied at the previous value

::: callout-tip
By default, smallest values get the smallest ranks. This can be reversed using `desc()` as with `arrrange()`
:::

## Offsets

In many contexts, especially data collected sequentially over times (e.g., economics, public health, etc.), it is common to need to `lag()` cases (or `lead()`) or to compute differences in the values of sequential pairs

-   Examples:

    -   time series models for forecasting future values of a series often depend on previous values of the series

    -   medical studies may focus on changes in blood chemistry levels from previous checks

## Offsets Examples

Create a simple dataset to illustrate:

```{r}
# Create a sample tribble
df <- tribble(
  ~date,       ~value,
  "2024-01-01", 10,
  "2024-01-02", 15,
  "2024-01-03", 12,
  "2024-01-04", 18,
  "2024-01-05", 20
)
df
```

Now compute lags, leads and differences.

```{r}
df <- df %>%
  mutate(
    lag_value = lag(value),
    lead_value = lead(value),
    diff_prev = value - lag_value # Use lag to compute difference
  )
df

```

::: callout-note
## What do we mean by offset?

An offset is simply shifting (say time) forward or backward so after lagging or leading, the new variable values are *offset* from the previous values.
:::

::: callout-caution
## Missing values

Note that the process of lagging and leading inevitably produce NA values since we cannot simply invent past and future observations!
:::

# Numeric Summaries

## Funtions used with `summarize()`

-   Measures of center
    -   Mean, median
-   Measures of position
    -   Minimum, maximum, percentiles, $n$th largest
-   Measures of spread
    -   IQR, standard deviation

See the [Data Transformation with dplyr](https://rstudio.github.io/cheatsheets/html/data-transformation.html) cheatsheet for details.

## Variability of Flight Times

**Question**:

1.  Which 5 destinations from O'Hare have the greatest variability in `air_time`? Use the `IQR()` and only destinations with at least 100 flights.

2.  What do these destinations have in common?

```{r}
chiflights2020 |> 
  filter(origin == "ORD") |> 
  group_by(dest) |> 
  summarize(iqr_air= IQR(air_time, na.rm = TRUE), n = n()) |> 
  filter(n >= 100) |> 
  arrange(desc(iqr_air)) # |> 
  # slice(1:5)
  
```

::: callout-tip
What modifications could you consider to answer other questions? Is there a relative measure that could be helpful?
:::

## More Practice 

**Question**: Which destination in the **chiflights2020** dataset shows the greatest variation in air speed? Try measuring variation in at least two different ways to see if you get similar results.
