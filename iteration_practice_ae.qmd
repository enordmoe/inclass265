---
title: "Iteration Practice"
subtitle: "Chapter 26"
author: "Your name here"
format:
  html:
    toc: true
    toc_depth: 2
    number-sections: true
    number-depth: 2
    theme: cerulean
execute: 
  warning: false
  cache: true
---


```{r, setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(purrr)  
library(janitor)
```


For this practice, we are going to explore a Pokemon data set from Kaggle that appeared in a previous year as a dataset of the day (https://www.kaggle.com/datasets/abcsds/pokemon).  

# Iterating Across Columns with `across()`

0. First read the data into a data frame called **pokemon** and use the **janitor** package to clean up the names.    

```{r}
pokemon <- read_csv("data/Pokemon.csv") |> 
  clean_names()
names(pokemon)
```


1. Use `across()` to calculate the mean of each numeric variable in `pokemon_dbl`.  

```{r}

```

2. Extend your previous code to calculate both the mean and median of each numeric variable in `pokemon_dbl`.  

```{r}


```

3.  Now, extend further your previous code to explicitly remove any possible NA values (even though there aren't any in this data set).

```{r}

```

4. Use the `.names` option of `across()` to return a summary that explicitly creates name for each summary so that each name has the pattern `statistic_variable` as in  `mean_attack`.

```{r}

```



5. **Challenge**: The function `fivenum()` calculates the five-number summary of a vector, consisting of the Min, Q1, Median, Q3, and Maximum where Q1 and Q3 are the 25th and 75th percentiles. Write code that will return a dataset with five number summaries of all the numeric variables. Hint: You will likely need to use the `reframe()` funciton. 

```{r}

```



# Just for fun: A Quick Intro to **plotly**  

Install the **plotly** package for interactive graphics. (Google it if you'd like to know more). I noticed someone had used it for a Pokemon analysis on Kaggle and thought you might like to get a taste. Below is a line of code for you to run. Explore the plot it produces. From what we've done with **ggplot2** and elsewhere, you should be able to make good sense of the code. Play around with the code to see what other interesting plots you can come up with for the **pokemon** data.  (Note that such interactive plots can be built into Shiny web apps for truly interactive data exploration.)

```{r}
library(plotly)
plot_ly(pokemon, x = ~sp_def, y = ~sp_atk, type = "scatter", mode = "markers", size =
          ~ total, color = ~legendary, text = ~name)
```



